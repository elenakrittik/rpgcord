"""
This type stub file was generated by pyright.
"""

from ..utils import _PoolAcquireContextManager, _PoolContextManager
from sqlalchemy.dialects.mysql.mysqldb import MySQLCompiler_mysqldb

class MySQLCompiler_pymysql(MySQLCompiler_mysqldb):
    def construct_params(self, params=..., _group_number=..., _check=...):
        ...



_dialect = ...
def create_engine(minsize=..., maxsize=..., loop=..., dialect=..., pool_recycle=..., compiled_cache=..., **kwargs): # -> _EngineContextManager:
    """A coroutine for Engine creation.

    Returns Engine instance with embedded connection pool.

    The pool has *minsize* opened connections to MySQL server.
    """
    ...

class Engine:
    """Connects a aiomysql.Pool and
    sqlalchemy.engine.interfaces.Dialect together to provide a
    source of database connectivity and behavior.

    An Engine object is instantiated publicly using the
    create_engine coroutine.
    """
    def __init__(self, dialect, pool, compiled_cache=..., **kwargs) -> None:
        ...

    @property
    def dialect(self): # -> Unknown:
        """An dialect for engine."""
        ...

    @property
    def name(self):
        """A name of the dialect."""
        ...

    @property
    def driver(self):
        """A driver of the dialect."""
        ...

    @property
    def minsize(self):
        ...

    @property
    def maxsize(self):
        ...

    @property
    def size(self):
        ...

    @property
    def freesize(self):
        ...

    def close(self): # -> None:
        """Close engine.

        Mark all engine connections to be closed on getting back to pool.
        Closed engine doesn't allow to acquire new connections.
        """
        ...

    def terminate(self): # -> None:
        """Terminate engine.

        Terminate engine pool with instantly closing all acquired
        connections also.
        """
        ...

    async def wait_closed(self): # -> None:
        """Wait for closing all engine's connections."""
        ...

    def acquire(self): # -> _EngineAcquireContextManager:
        """Get a connection from pool."""
        ...

    def release(self, conn):
        """Revert back connection to pool."""
        ...

    def __enter__(self):
        ...

    def __exit__(self, *args): # -> None:
        ...

    def __iter__(self): # -> Generator[Unknown, Unknown, _ConnectionContextManager]:
        ...

    async def __aenter__(self): # -> Self@Engine:
        ...

    async def __aexit__(self, exc_type, exc_val, exc_tb): # -> None:
        ...



_EngineContextManager = _PoolContextManager
_EngineAcquireContextManager = _PoolAcquireContextManager
class _ConnectionContextManager:
    """Context manager.

    This enables the following idiom for acquiring and releasing a
    connection around a block:

        with (yield from engine) as conn:
            cur = yield from conn.cursor()

    while failing loudly when accidentally using:

        with engine:
            <block>
    """
    __slots__ = ...
    def __init__(self, engine, conn) -> None:
        ...

    def __enter__(self):
        ...

    def __exit__(self, *args): # -> None:
        ...
