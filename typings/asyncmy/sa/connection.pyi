"""
This type stub file was generated by pyright.
"""

def noop(k):
    ...

class SAConnection:
    def __init__(self, connection, engine, compiled_cache=...) -> None:
        ...

    def execute(self, query, *multiparams, **params): # -> _SAConnectionContextManager:
        """Executes a SQL query with optional parameters.

        query - a SQL query string or any sqlalchemy expression.

        *multiparams/**params - represent bound parameter values to be
        used in the execution.  Typically, the format is a dictionary
        passed to *multiparams:

            await conn.execute(
                table.insert(),
                {"id":1, "value":"v1"},
            )

        ...or individual key/values interpreted by **params::

            await conn.execute(
                table.insert(), id=1, value="v1"
            )

        In the case that a plain SQL string is passed, a tuple or
        individual values in *multiparams may be passed::

            await conn.execute(
                "INSERT INTO table (id, value) VALUES (%d, %s)",
                (1, "v1")
            )

            await conn.execute(
                "INSERT INTO table (id, value) VALUES (%s, %s)",
                1, "v1"
            )

        Returns ResultProxy instance with results of SQL query
        execution.

        """
        ...

    async def scalar(self, query, *multiparams, **params):
        """Executes a SQL query and returns a scalar value."""
        ...

    @property
    def closed(self): # -> Literal[True]:
        """The readonly property that returns True if connections is closed."""
        ...

    @property
    def connection(self): # -> Unknown | None:
        ...

    def begin(self): # -> _TransactionContextManager:
        """Begin a transaction and return a transaction handle.

        The returned object is an instance of Transaction.  This
        object represents the "scope" of the transaction, which
        completes when either the .rollback or .commit method is
        called.

        Nested calls to .begin on the same SAConnection instance will
        return new Transaction objects that represent an emulated
        transaction within the scope of the enclosing transaction,
        that is::

            trans = await conn.begin()   # outermost transaction
            trans2 = await conn.begin()  # "nested"
            await trans2.commit()        # does nothing
            await trans.commit()         # actually commits

        Calls to .commit only have an effect when invoked via the
        outermost Transaction object, though the .rollback method of
        any of the Transaction objects will roll back the transaction.

        See also:
          .begin_nested - use a SAVEPOINT
          .begin_twophase - use a two phase/XA transaction

        """
        ...

    async def begin_nested(self): # -> RootTransaction | NestedTransaction:
        """Begin a nested transaction and return a transaction handle.

        The returned object is an instance of :class:`.NestedTransaction`.

        Nested transactions require SAVEPOINT support in the
        underlying database.  Any transaction in the hierarchy may
        .commit() and .rollback(), however the outermost transaction
        still controls the overall .commit() or .rollback() of the
        transaction of a whole.
        """
        ...

    async def begin_twophase(self, xid=...): # -> TwoPhaseTransaction:
        """Begin a two-phase or XA transaction and return a transaction
        handle.

        The returned object is an instance of
        TwoPhaseTransaction, which in addition to the
        methods provided by Transaction, also provides a
        TwoPhaseTransaction.prepare() method.

        xid - the two phase transaction id.  If not supplied, a
        random id will be generated.
        """
        ...

    async def recover_twophase(self): # -> list[Unknown]:
        """Return a list of prepared twophase transaction ids."""
        ...

    async def rollback_prepared(self, xid, *, is_prepared=...): # -> None:
        """Rollback prepared twophase transaction."""
        ...

    async def commit_prepared(self, xid, *, is_prepared=...): # -> None:
        """Commit prepared twophase transaction."""
        ...

    @property
    def in_transaction(self): # -> bool:
        """Return True if a transaction is in progress."""
        ...

    async def close(self): # -> None:
        """Close this SAConnection.

        This results in a release of the underlying database
        resources, that is, the underlying connection referenced
        internally. The underlying connection is typically restored
        back to the connection-holding Pool referenced by the Engine
        that produced this SAConnection. Any transactional state
        present on the underlying connection is also unconditionally
        released via calling Transaction.rollback() method.

        After .close() is called, the SAConnection is permanently in a
        closed state, and will allow no further operations.
        """
        ...

    async def __aenter__(self): # -> Self@SAConnection:
        ...

    async def __aexit__(self, exc_type, exc_val, exc_tb): # -> None:
        ...
