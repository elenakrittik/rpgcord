"""
This type stub file was generated by pyright.
"""

class Transaction:
    """Represent a database transaction in progress.

    The Transaction object is procured by
    calling the SAConnection.begin() method of
    SAConnection:

        with (yield from engine) as conn:
            trans = yield from conn.begin()
            try:
                yield from conn.execute("insert into x (a, b) values (1, 2)")
            except Exception:
                yield from trans.rollback()
            else:
                yield from trans.commit()

    The object provides .rollback() and .commit()
    methods in order to control transaction boundaries.

    See also:  SAConnection.begin(), SAConnection.begin_twophase(),
    SAConnection.begin_nested().
    """
    def __init__(self, connection, parent) -> None:
        ...

    @property
    def is_active(self): # -> bool:
        """Return ``True`` if a transaction is active."""
        ...

    @property
    def connection(self): # -> Unknown:
        """Return transaction's connection (SAConnection instance)."""
        ...

    async def close(self): # -> None:
        """Close this transaction.

        If this transaction is the base transaction in a begin/commit
        nesting, the transaction will rollback().  Otherwise, the
        method returns.

        This is used to cancel a Transaction without affecting the scope of
        an enclosing transaction.
        """
        ...

    async def rollback(self): # -> None:
        """Roll back this transaction."""
        ...

    async def commit(self): # -> None:
        """Commit this transaction."""
        ...

    async def __aenter__(self): # -> Self@Transaction:
        ...

    async def __aexit__(self, exc_type, exc_val, exc_tb): # -> None:
        ...



class RootTransaction(Transaction):
    def __init__(self, connection) -> None:
        ...



class NestedTransaction(Transaction):
    """Represent a 'nested', or SAVEPOINT transaction.

    A new NestedTransaction object may be procured
    using the SAConnection.begin_nested() method.

    The interface is the same as that of Transaction class.
    """
    _savepoint = ...
    def __init__(self, connection, parent) -> None:
        ...



class TwoPhaseTransaction(Transaction):
    """Represent a two-phase transaction.

    A new TwoPhaseTransaction object may be procured
    using the SAConnection.begin_twophase() method.

    The interface is the same as that of Transaction class
    with the addition of the .prepare() method.
    """
    def __init__(self, connection, xid) -> None:
        ...

    @property
    def xid(self): # -> Unknown:
        """Returns twophase transaction id."""
        ...

    async def prepare(self): # -> None:
        """Prepare this TwoPhaseTransaction.

        After a PREPARE, the transaction can be committed.
        """
        ...
