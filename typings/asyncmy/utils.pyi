"""
This type stub file was generated by pyright.
"""

from collections.abc import Coroutine

class _ContextManager(Coroutine):
    __slots__ = ...
    def __init__(self, coro) -> None:
        ...

    def send(self, value):
        ...

    def throw(self, typ, val=..., tb=...):
        ...

    def close(self):
        ...

    @property
    def gi_frame(self):
        ...

    @property
    def gi_running(self):
        ...

    @property
    def gi_code(self):
        ...

    def __next__(self):
        ...

    def __iter__(self):
        ...

    def __await__(self):
        ...

    async def __aenter__(self):
        ...

    async def __aexit__(self, exc_type, exc, tb): # -> None:
        ...



class _ConnectionContextManager(_ContextManager):
    async def __aexit__(self, exc_type, exc, tb): # -> None:
        ...



class _PoolContextManager(_ContextManager):
    async def __aexit__(self, exc_type, exc, tb): # -> None:
        ...



class _SAConnectionContextManager(_ContextManager):
    def __aiter__(self): # -> Self@_SAConnectionContextManager:
        ...

    async def __anext__(self):
        ...



class _TransactionContextManager(_ContextManager):
    async def __aexit__(self, exc_type, exc, tb): # -> None:
        ...



class _PoolAcquireContextManager(_ContextManager):
    __slots__ = ...
    def __init__(self, coro, pool) -> None:
        ...

    async def __aenter__(self):
        ...

    async def __aexit__(self, exc_type, exc, tb): # -> None:
        ...



class _PoolConnectionContextManager:
    """Context manager.

    This enables the following idiom for acquiring and releasing a
    connection around a block:

        with (yield from pool) as conn:
            cur = yield from conn.cursor()

    while failing loudly when accidentally using:

        with pool:
            <block>
    """
    __slots__ = ...
    def __init__(self, pool, conn) -> None:
        ...

    def __enter__(self): # -> Unknown:
        ...

    def __exit__(self, exc_type, exc_val, exc_tb): # -> None:
        ...

    async def __aenter__(self):
        ...

    async def __aexit__(self, exc_type, exc_val, exc_tb): # -> None:
        ...
