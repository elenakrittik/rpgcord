"""
This type stub file was generated by pyright.
"""

import asyncio
from typing import Any
from pymysql.err import DataError, DatabaseError, Error, IntegrityError, InterfaceError, InternalError, NotSupportedError, OperationalError, ProgrammingError, Warning
from .cursors import Cursor

DEFAULT_USER = ...
async def connect(
    host: str =...,
    user: str =...,
    password: str =...,
    db: str =...,
    port: int =...,
    # unix_socket=...,
    # charset=...,
    # sql_mode=...,
    # read_default_file=...,
    # conv=...,
    # use_unicode=...,
    # client_flag=...,
    # cursorclass=...,
    # init_command=...,
    # connect_timeout=...,
    # read_default_group=...,
    # autocommit=...,
    # echo=...,
    # local_infile=...,
    # loop=...,
    # ssl=...,
    # auth_plugin=...,
    # program_name=...,
    # server_public_key=...,
) -> Connection:
    """See connections.Connection.__init__() for information about defaults."""
    ...

class _StreamReader(asyncio.StreamReader):
    """This StreamReader exposes whether EOF was received, allowing us to
    discard the associated connection instead of returning it from the pool
    when checking free connections in Pool._fill_free_pool().

    `limit` arg has been removed as we don't currently use it.
    """
    def __init__(self, loop=...) -> None:
        ...

    def feed_eof(self) -> None:
        ...

    @property
    def eof_received(self): # -> bool:
        ...



class Connection:
    """Representation of a socket with a mysql server.

    The proper way to get an instance of this class is to call
    connect().
    """
    def __init__(self, host=..., user=..., password=..., db=..., port=..., unix_socket=..., charset=..., sql_mode=..., read_default_file=..., conv=..., use_unicode=..., client_flag=..., cursorclass=..., init_command=..., connect_timeout=..., read_default_group=..., autocommit=..., echo=..., local_infile=..., loop=..., ssl=..., auth_plugin=..., program_name=..., server_public_key=...) -> None:
        """
        Establish a connection to the MySQL database. Accepts several
        arguments:

        :param host: Host where the database server is located
        :param user: Username to log in as
        :param password: Password to use.
        :param db: Database to use, None to not use a particular one.
        :param port: MySQL port to use, default is usually OK.
        :param unix_socket: Optionally, you can use a unix socket rather
        than TCP/IP.
        :param charset: Charset you want to use.
        :param sql_mode: Default SQL_MODE to use.
        :param read_default_file: Specifies  my.cnf file to read these
            parameters from under the [client] section.
        :param conv: Decoders dictionary to use instead of the default one.
            This is used to provide custom marshalling of types.
            See converters.
        :param use_unicode: Whether or not to default to unicode strings.
        :param  client_flag: Custom flags to send to MySQL. Find
            potential values in constants.CLIENT.
        :param cursorclass: Custom cursor class to use.
        :param init_command: Initial SQL statement to run when connection is
            established.
        :param connect_timeout: Timeout before throwing an exception
            when connecting.
        :param read_default_group: Group to read from in the configuration
            file.
        :param autocommit: Autocommit mode. None means use server default.
            (default: False)
        :param local_infile: boolean to enable the use of LOAD DATA LOCAL
            command. (default: False)
        :param ssl: Optional SSL Context to force SSL
        :param auth_plugin: String to manually specify the authentication
            plugin to use, i.e you will want to use mysql_clear_password
            when using IAM authentication with Amazon RDS.
            (default: Server Default)
        :param program_name: Program name string to provide when
            handshaking with MySQL. (omitted by default)
        :param server_public_key: SHA256 authentication plugin public
            key value.
        :param loop: asyncio loop
        """
        ...

    @property
    def host(self): # -> str | Any:
        """MySQL server IP address or name"""
        ...

    @property
    def port(self): # -> int:
        """MySQL server TCP/IP port"""
        ...

    @property
    def unix_socket(self): # -> str | Any | None:
        """MySQL Unix socket file location"""
        ...

    @property
    def db(self): # -> str | Any | None:
        """Current database name."""
        ...

    @property
    def user(self): # -> str | Any:
        """User used while connecting to MySQL"""
        ...

    @property
    def echo(self): # -> bool:
        """Return echo mode status."""
        ...

    @property
    def last_usage(self): # -> float:
        """Return time() when connection was used."""
        ...

    @property
    def loop(self): # -> AbstractEventLoop:
        ...

    @property
    def closed(self) -> bool:
        """The readonly property that returns ``True`` if connections is
        closed.
        """
        ...

    @property
    def encoding(self):
        """Encoding employed for this connection."""
        ...

    @property
    def charset(self): # -> str | Any:
        """Returns the character set for current connection."""
        ...

    def close(self) -> None:
        """Close socket connection"""
        ...

    async def ensure_closed(self): # -> None:
        """Send quit command and then close socket connection"""
        ...

    async def autocommit(self, value) -> None:
        """Enable/disable autocommit mode for current MySQL session.

        :param value: ``bool``, toggle autocommit
        """
        ...

    def get_autocommit(self): # -> bool:
        """Returns autocommit status for current MySQL session.

        :returns bool: current autocommit status."""
        ...

    async def begin(self) -> None:
        """Begin transaction."""
        ...

    async def commit(self) -> None:
        """Commit changes to stable storage."""
        ...

    async def rollback(self) -> None:
        """Roll back the current transaction."""
        ...

    async def select_db(self, db): # -> None:
        """Set current db"""
        ...

    async def show_warnings(self): # -> tuple[tuple[Unknown, ...]] | tuple[Unknown, ...] | None:
        """SHOW WARNINGS"""
        ...

    def escape(self, obj) -> str:
        """Escape whatever value you pass to it"""
        ...

    def literal(self, obj): # -> str:
        """Alias for escape()"""
        ...

    def escape_string(self, s): # -> str:
        ...

    def cursor(self, *cursors: Any) -> Cursor:
        """Instantiates and returns a cursor

        By default, :class:`Cursor` is returned. It is possible to also give a
        custom cursor through the cursor_class parameter, but it needs to
        be a subclass  of :class:`Cursor`

        :param cursor: custom cursor class.
        :returns: instance of cursor, by default :class:`Cursor`
        :raises TypeError: cursor_class is not a subclass of Cursor.
        """
        ...

    async def query(self, sql, unbuffered=...): # -> int | None:
        ...

    async def next_result(self): # -> int | None:
        ...

    def affected_rows(self): # -> int | None:
        ...

    async def kill(self, thread_id): # -> None:
        ...

    async def ping(self, reconnect=...): # -> None:
        """Check if the server is alive"""
        ...

    async def set_charset(self, charset): # -> None:
        """Sets the character set for the current connection"""
        ...

    def write_packet(self, payload): # -> None:
        """Writes an entire "mysql packet" in its entirety to the network
        addings its length and sequence number.
        """
        ...

    def insert_id(self): # -> Literal[0] | None:
        ...

    async def __aenter__(self): # -> Self@Connection:
        ...

    async def __aexit__(self, exc_type, exc_val, exc_tb): # -> None:
        ...

    async def caching_sha2_password_auth(self, pkt): # -> MysqlPacket | None:
        ...

    async def sha256_password_auth(self, pkt): # -> MysqlPacket:
        ...

    def thread_id(self): # -> Any:
        ...

    def character_set_name(self): # -> str | Any:
        ...

    def get_host_info(self): # -> str | Any:
        ...

    def get_proto_info(self):
        ...

    def get_transaction_status(self): # -> bool:
        ...

    def get_server_info(self):
        ...

    def __del__(self): # -> None:
        ...

    Warning = Warning
    Error = Error
    InterfaceError = InterfaceError
    DatabaseError = DatabaseError
    DataError = DataError
    OperationalError = OperationalError
    IntegrityError = IntegrityError
    InternalError = InternalError
    ProgrammingError = ProgrammingError
    NotSupportedError = NotSupportedError


class MySQLResult:
    def __init__(self, connection) -> None:
        ...

    async def read(self): # -> None:
        ...

    async def init_unbuffered_query(self): # -> None:
        ...



class LoadLocalFile:
    def __init__(self, filename, connection) -> None:
        ...

    async def send_data(self): # -> None:
        """Send data packets from the local file to the server"""
        ...
