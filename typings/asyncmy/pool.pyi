"""
This type stub file was generated by pyright.
"""

import asyncio

def create_pool(minsize=..., maxsize=..., echo=..., pool_recycle=..., loop=..., **kwargs): # -> _PoolContextManager:
    ...

class Pool(asyncio.AbstractServer):
    """Connection pool"""
    def __init__(self, minsize, maxsize, echo, pool_recycle, loop, **kwargs) -> None:
        ...

    @property
    def echo(self): # -> Unknown:
        ...

    @property
    def minsize(self): # -> Unknown:
        ...

    @property
    def maxsize(self): # -> int | None:
        ...

    @property
    def size(self): # -> int:
        ...

    @property
    def freesize(self): # -> int:
        ...

    async def clear(self): # -> None:
        """Close all free connections in pool."""
        ...

    @property
    def closed(self): # -> bool:
        """
        The readonly property that returns ``True`` if connections is closed.
        """
        ...

    def close(self): # -> None:
        """Close pool.

        Mark all pool connections to be closed on getting back to pool.
        Closed pool doesn't allow to acquire new connections.
        """
        ...

    def terminate(self): # -> None:
        """Terminate pool.

        Close pool with instantly closing all acquired connections also.
        """
        ...

    async def wait_closed(self): # -> None:
        """Wait for closing all pool's connections."""
        ...

    def acquire(self): # -> _PoolAcquireContextManager:
        """Acquire free connection from the pool."""
        ...

    def release(self, conn):
        """Release free connection back to the connection pool.

        This is **NOT** a coroutine.
        """
        ...

    def __enter__(self):
        ...

    def __exit__(self, *args): # -> None:
        ...

    def __iter__(self): # -> Generator[Unknown, Unknown, _PoolConnectionContextManager]:
        ...

    def __await__(self): # -> Generator[Unknown, Unknown, _PoolConnectionContextManager]:
        ...

    async def __aenter__(self): # -> Self@Pool:
        ...

    async def __aexit__(self, exc_type, exc_val, exc_tb): # -> None:
        ...
